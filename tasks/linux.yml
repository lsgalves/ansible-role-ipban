---
- name: install dependencies
  package:
    name: "{{ item }}"
    state: present
  loop:
    - unzip
    - iptables
    - ipset
  tags:
    - ipban_install

- name: check if it is installed
  stat:
    path: "{{ ipban_app_dir }}/DigitalRuby.IPBan"
  register: ipban_program

- name: uninstall if installed
  when: ipban_program.stat.exists
  block:
    - name: stop service
      service:
        name: ipban
        state: stopped

    - name: create temp directory to current state
      tempfile:
        suffix: ipban
        state: directory
      register: ipban_temp_dir

    - name: copy config and db files to temp directory
      copy:
        src: "{{ ipban_app_dir }}/{{ item }}"
        dest: "{{ ipban_temp_dir.path }}/{{ item }}"
        remote_src: yes
      loop:
        - ipban.config
        - ipban.override.config
        - ipban.sqlite
        - nlog.config

- name: ensure exists application directory
  file:
    path: "{{ ipban_app_dir }}"
    state: directory
  tags:
    - ipban_install

- name: download and extract ipban
  unarchive:
    src: "https://github.com/DigitalRuby/IPBan/releases/download/{{ ipban_version }}/IPBan-Linux-x64_{{ ipban_version | replace('.', '_') }}.zip"
    dest: "{{ ipban_app_dir }}"
    remote_src: yes
  tags:
    - ipban_install

- name: allow execute permissions for ipban
  file:
    path: "{{ ipban_app_dir }}/DigitalRuby.IPBan"
    state: file
    mode: 0755
  tags:
    - ipban_install
    - ipban_configure

- name: copy back over the config and db files
  copy:
    src: "{{ ipban_temp_dir.path }}/{{ item }}"
    dest: "{{ ipban_app_dir }}/{{ item }}"
    remote_src: yes
  when: ipban_program.stat.exists
  tags:
    - ipban_install
  loop:
    - ipban.config
    - ipban.override.config
    - ipban.sqlite
    - nlog.config

- name: ensure temp dir is not exists
  file:
    path: "{{ ipban_temp_dir.path }}"
    state: absent
  when: ipban_program.stat.exists
  tags:
    - ipban_install

- name: create systemd service unit
  template:
    src: ipban.service.j2
    dest: /lib/systemd/system/ipban.service
    owner: root
    group: root
    mode: 0644
  notify:
    - restart ipban
  tags:
    - ipban_install
    - ipban_configure

- name: ensure ipban service is started and enabled
  systemd:
    name: ipban
    state: started
    enabled: yes
    daemon_reload: yes
  tags:
    - ipban_install
    - ipban_configure
    - ipban_run

- name: config ipban
  template:
    src: ipban.config.j2
    dest: "{{ ipban_app_dir }}/ipban.config"
  notify:
    - restart ipban
  tags:
    - ipban_config
